class ASTGeneration(MPVisitor):

    def visitProgram(self,ctx:MPParser.ProgramContext):

        return self.visit(ctx.exp())

    def visitExp(self,ctx:MPParser.ExpContext):

        if ctx.getChildCount() == 3:
            return Binary(ctx.ASSIGN().getText(), ctx.term().accept(self) , ctx.exp().accept(self))
        else:
            return self.visit(ctx.term())

    def visitTerm(self,ctx:MPParser.TermContext): 

        if ctx.getChildCount() == 1:
            return self.visit(ctx.factor(0))
        else:
            return  Binary(ctx.COMPARE().getText(), self.visit(ctx.factor(0)), self.visit(ctx.factor(1)))

    def visitFactor(self,ctx:MPParser.FactorContext):

        if ctx.getChildCount() == 1:
            return self.visit(ctx.operand())
        else:
            return Binary(ctx.ANDOR().getText(), self.visit(ctx.factor()), self.visit(ctx.operand()))

    def visitOperand(self,ctx:MPParser.OperandContext):
        if ctx.ID():
            return Id(ctx.ID().getText())
        elif ctx.INTLIT():
            return IntLiteral(ctx.INTLIT().getText())
        elif ctx.BOOLIT():
            return BooleanLiteral(ctx.BOOLIT().getText())
        else:
            return self.visit(ctx.exp())
